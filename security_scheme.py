from pydantic import BaseModel, Field
from typing import Any, Dict


class OAuthFlowBase(BaseModel):

    refreshUrl: str
    """The URL to be used for obtaining refresh tokens. This MUST be in the form of a URL."""

    scopes: Dict[str, str]
    """The available scopes for the OAuth2 security scheme. A map between the scope name and a short description for it."""


class OAuthFlowImplicit(OAuthFlowBase):

    authorizationUrl: str
    """The authorization URL to be used for this flow. This MUST be in the form of a URL."""


class OAuthFlowPassword(OAuthFlowBase):

    tokenUrl: str
    """The token URL to be used for this flow. This MUST be in the form of a URL."""


class OAuthFlowClientCredentials(OAuthFlowBase):

    tokenUrl: str
    """The token URL to be used for this flow. This MUST be in the form of a URL."""


class OAuthFlowAuthorizationCode(OAuthFlowBase):

    authorizationUrl: str
    """The authorization URL to be used for this flow. This MUST be in the form of a URL."""

    tokenUrl: str
    """The token URL to be used for this flow. This MUST be in the form of a URL."""


class OAuthFlows:

    implicit: OAuthFlowImplicit
    """Flow Object	Configuration for the OAuth Implicit flow"""

    password: OAuthFlowPassword
    """Flow Object	Configuration for the OAuth Resource Owner Protected Credentials flow"""

    clientCredentials: OAuthFlowClientCredentials
    """Flow Object	Configuration for the OAuth Client Credentials flow."""

    authorizationCode: OAuthFlowAuthorizationCode
    """Flow Object	Configuration for the OAuth Authorization Code flow."""


class SecuritySchemeBase(BaseModel):

    scheme_type: str = Field(
        regex=r"userPassword|apiKey|X509|symmetricEncryption|asymmetricEncryption|httpApiKey|http|oauth2|openIdConnect"
    )
    """The type of the security scheme. Valid values are "userPassword", "apiKey", "X509", "symmetricEncryption", "asymmetricEncryption", "httpApiKey", "http", oauth2, and openIdConnect."""

    description: str
    """A short description for security scheme. CommonMark syntax MAY be used for rich text representation."""


class SecuritySchemeUserPassword(SecuritySchemeBase):
    pass


class SecuritySchemeX509(SecuritySchemeBase):
    pass


class SecuritySchemeSymmetricEncryption(SecuritySchemeBase):
    pass


class SecuritySchemeAsymmetricEncryption(SecuritySchemeBase):
    pass


class SecuritySchemeApiKey(SecuritySchemeBase):

    inside: str = Field(regex=r"^(user|password)$")
    """The location of the API key. Valid values are "user" and "password" for apiKey"""


class SecuritySchemeHttpApiKey(SecuritySchemeBase):

    inside: str = Field(regex=r"^(query|header|cookie)$")
    """The location of the API key. Valid values are "query", "header" or "cookie" for httpApiKey"""

    name: str
    """The name of the header, query or cookie parameter to be used."""


class SecuritySchemeHttp(SecuritySchemeBase):

    scheme: str
    """The name of the HTTP Authorization scheme to be used in the Authorization header as defined in RFC7235."""


class SecuritySchemeHttpBearer(SecuritySchemeBase):

    bearerFormat: str
    """A hint to the client to identify how the bearer token is formatted. Bearer tokens are usually generated by an authorization server, so this information is primarily for documentation purposes"""


class SecuritySchemeOAuth2(SecuritySchemeBase):

    flows: OAuthFlows
    """An object containing configuration information for the flow types supported."""


class SecuritySchemeOpenIdConnect(SecuritySchemeBase):

    openIdConnectUrl: str
    """OpenId Connect URL to discover OAuth2 configuration values. This MUST be in the form of a URL."""


SecurityScheme = Any[
    SecuritySchemeUserPassword,
    SecuritySchemeApiKey,
    SecuritySchemeX509,
    SecuritySchemeSymmetricEncryption,
    SecuritySchemeAsymmetricEncryption,
    SecuritySchemeHttpApiKey,
    SecuritySchemeHttp,
    SecuritySchemeHttpBearer,
    SecuritySchemeOAuth2,
    SecuritySchemeOpenIdConnect,
]

# class SecurityRequirement:
#     field